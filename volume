#!/usr/bin/env python2
import os
import sys
import subprocess
import re
import psutil

from collections import OrderedDict

DEFAULT_STEP = 5
VERBOSE = False
ONLY_ACTIVE = False

def usage():
    print >>sys.stderr, '''usage: %s ([+-]<0-100>|mute|unmute|toggle|next) [--active-window] [-v|--verbose]

    N:       Set volume to N%%
    +N:      Increase volume by N%%
    -N:      Decrease volume by N%%
    mute:    Mute volume
    unmute:  Unmute volume
    toggle:  Toggle between muted/unmuted
    next:    Switch all outputs next Pulse Audio sink, and set it as the default
             sink ''' % sys.argv[0]
    sys.exit(1)

def die(msg):
    print >>sys.stderr, msg
    sys.exit(1)

def optparse(argv):
    global VERBOSE, ONLY_ACTIVE
    try:
        argv.remove('-v')
        VERBOSE = True
    except:
        pass
    try:
        argv.remove('--verbose')
        VERBOSE = True
    except:
        pass

    try:
        argv.remove('--active-window')
        ONLY_ACTIVE = True
    except:
        pass

    if len(argv) != 2:
        usage()

    opt = argv[1]
    arg = None
    if opt[0] in '+-':
        if len(opt) == 1:
            arg = int(opt + str(DEFAULT_STEP))
        elif opt[1:].isdigit():
            arg = int(opt)
        else:
            usage()
        opt = 'adjust'
    elif opt.isdigit():
        arg = int(opt)
        opt = 'set'

    elif opt not in ('toggle', 'mute', 'unmute', 'next'):
        usage()

    return opt, arg

# Parse args
opt, arg = optparse(sys.argv)

def runcmd(cmd):
    out = subprocess.check_output(cmd, shell=True)
    if VERBOSE:
        print >>sys.stderr, '$ %s' % cmd
        print >>sys.stderr, out
    return out

def pacmd(cmd):
    return runcmd('pacmd ' + cmd)

def assert_pulseaudio_running():
    for _ in range(5):
        try:
            runcmd('pulseaudio --check')
            return
        except:
            runcmd('pulseaudio --start')
        print >>sys.stderr, 'Could not start PulseAudio'
    sys.exit(1)

def parse_error(lines, i, msg):
    markers = ['   '] * len(lines)
    markers[i] = '>>>'
    out = '\n'.join('%s %s' for m, l in zip(markers, lines))
    die('Parse error: %s\n%s' % (msg, out))

def parse_kvs(lines, i, tabs=1, is_properties=False):
    kvs = OrderedDict()
    key = None
    val = None
    sub = None
    sep = '=' if is_properties else ':'
    def error():
        die('Parse error: expected "%s<key>%s[<val>]":\n%r' %
            ('\\t' * tabs, sep, lines[i]))

    while i < len(lines):
        line = lines[i].lstrip('\t')
        if not line:
            i += 1
            continue

        this_tabs = len(lines[i]) - len(line)

        if this_tabs < tabs:
            break

        elif this_tabs == tabs:
            if line[0] == ' ':
                if not key:
                    error()
                kvs[key] += '\n' + line.strip()
            else:
                try:
                    key, val = line.split(sep, 1)
                    key = key.strip()
                    val = val.strip()
                    if is_properties:
                        while val[-1] != '"':
                            i += 1
                            val += lines[i]
                        val = val.strip('"')
                    kvs[key] = val
                except ValueError:
                    error()
            i += 1

        else: # this_tabs > tabs
            is_prop = key == 'properties'
            i, sub = parse_kvs(lines, i, this_tabs, is_prop)
            if val:
                sub['description'] = val
            kvs[key] = sub

    return i, kvs

def parse(data):
    out = OrderedDict()
    lines = data.splitlines()
    i = 1
    current = None
    while i < len(lines):
        line = lines[i]
        assert line[4:].startswith('index: ')
        idx = int(line[11:])
        if line.startswith('  * '):
            current = idx
        i, kvs = parse_kvs(lines, i + 1)
        out[idx] = kvs
    return current, out

def yesno(yes):
    return 'yes' if yes else 'no'

def get_sinks():
    return parse(pacmd('list-sinks'))

def get_inputs():
    return parse(pacmd('list-sink-inputs'))[1]

def mute_sink(idx, yes):
    pacmd('set-sink-mute %d %s' % (idx, yesno(yes)))

def mute_input(idx, yes):
    pacmd('set-sink-input-mute %d %s' % (idx, yesno(yes)))

def set_sink_volume(idx, vol):
    pacmd('set-sink-volume %d %d' % (idx, vol))

def set_sink_port(idx, port):
    pacmd('set-sink-port %d %s' % (idx, port))

def set_default_sink(idx):
    pacmd('set-default-sink %d' % idx)

def move_inputs(sink_idx):
    for idx, _ in get_inputs().items():
        pacmd('move-sink-input %d %d' % (idx, sink_idx))

assert_pulseaudio_running()

# Get current state
cur_sink, sinks = get_sinks()
ports = sinks[cur_sink].get('ports')

if ONLY_ACTIVE:
    winpid = int(subprocess.check_output(
        ['xdotool', 'getactivewindow', 'getwindowpid']).strip())
    p = psutil.Process(winpid)
    pids = [winpid] + [p.pid for p in p.children(recursive=True)]
    inputs = get_inputs()
    for k, v in inputs.items():
        if int(v['properties']['application.process.id']) not in pids:
            del inputs[k]
    print pids

volume = {}
for idx, kvs in sinks.items():
    curvol = int(re.search(r'\d+', kvs['volume']).group())
    maxvol = int(re.search(r'\d+', kvs['base volume']).group())
    volume[idx] = [curvol, maxvol]

# TODO: handle --active-window for all commands

# Handle args
if opt == 'adjust':
    curvol, maxvol = volume[cur_sink]
    arg += 100.0 * curvol / maxvol
    arg = min(100, arg)
    arg = max(0, arg)
    opt = 'set'

if opt == 'set':
    maxvol = volume[cur_sink][1]
    volume[cur_sink][0] = arg * maxvol / 100
    set_sink_volume(cur_sink, volume[cur_sink][0])
    mute_sink(cur_sink, False)

elif opt == 'mute':
    mute_sink(cur_sink, True)

elif opt == 'unmute':
    mute_sink(cur_sink, False)

elif opt == 'toggle':
    if ONLY_ACTIVE:
        for k, v in inputs.items():
            print k, v['muted']
            mute_input(k, v['muted'] == 'no')
    else:
        mute_sink(cur_sink, sinks[cur_sink]['muted'] == 'no')

elif opt == 'next':
    if ports:
        port_keys = ports.keys()
        cur_port = sinks[cur_sink]['active port'].strip('<>')
        i = port_keys.index(cur_port) + 1
        if i < len(ports):
            set_sink_port(cur_sink, port_keys[i])
        else:
            # Hack: see next if-statement
            ports = None

    if not ports:
        sink_keys = sinks.keys()
        cur_sink = sink_keys[(sink_keys.index(cur_sink) + 1) % len(sinks)]
        set_default_sink(cur_sink)
        ports = sinks[cur_sink].get('ports')
        if ports:
            cur_port = ports.keys()[0]
            set_sink_port(cur_sink, cur_port)

    cur_sink, sinks = get_sinks()

desc = sinks[cur_sink]['properties']['device.description']
if ports:
    cur_port = sinks[cur_sink]['active port'].strip('<>')
    desc += ': ' + ports[cur_port]['description'].split(' (', 1)[0]

cur_sink, sinks = get_sinks()
if sinks[cur_sink]['muted'] == 'yes':
    vols = 'muted'
    vold = 0
else:
    curvol, maxvol = volume[cur_sink]
    vold = int(100.0 * curvol / maxvol)
    vols = '%d%%' % (100.0 * curvol / maxvol)

os.system('notify "%s (%s)" --percentage %d --time 1 &' % (desc, vols, vold))
print desc
print vols
